# encoding: utf-8
# -*- mode: ruby -*-

# bootstrapped from
#https://medium.com/@JohnFoderaro/how-to-set-up-a-local-linux-environment-with-vagrant-163f0ba4da77

# Box / OS
VAGRANT_BOX = 'ubuntu/bionic64'

# Memorable name for your
VM_NAME = 'dev2'
# VM User — 'vagrant' by default
VM_USER = 'vagrant'

# # VM Port — uncomment this to use NAT instead of DHCP
VM_PORT = 8080

VAGRANT_EXPERIMENTAL="disks"

Vagrant.configure(2) do |config|
  # Vagrant box from Hashicorp
  config.vm.box = VAGRANT_BOX

  # Actual machine name
  config.vm.hostname = VM_NAME

  config.vm.disk :disk, size: "25GB", primary: true

  # Allow multiple instances of this VM by changing VM_NAME
  config.vm.define VM_NAME

  # Set VM name in Virtualbox
  config.vm.provider "virtualbox" do |v|
    v.name = VM_NAME
    v.memory = 8192
    v.cpus = 4
    v.gui = true

    # Small, necessary tweak to get windowing to work
    v.customize ["modifyvm", :id, "--vram", "256"]
    v.customize ["modifyvm", :id, "--accelerate3d", "on"]
    v.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"]
  end

  # Disallow guest additions as a middleware, require an explicit command.
  # 
  # If this fails,
  # vagrant plugin install vagrant-vbguest
  config.vbguest.auto_update = false

  if defined? ansible
    # Handle potential issue with ansible install in ubuntu 18.04
    # https://github.com/hashicorp/vagrant/issues/9796
    ansible.install_mode = "pip"
  end

  #DHCP — comment this out if planning on using NAT instead
  # config.vm.network "private_network", type: "dhcp"
  # # Port forwarding — uncomment this to use NAT instead of DHCP
  # config.vm.network "forwarded_port", guest: 80, host: VM_PORT

  # Disable default Vagrant folder, use a unique path per project
  config.vm.synced_folder '.', '/home/'+VM_USER+'', disabled: true

  # Allow xforwarding
  config.ssh.forward_x11 = true

  # Copy in our keypair
  config.vm.provision "file",
    source: "~/.ssh/id_ed25519",
    destination: "/home/vagrant/.ssh/id_ed25519"

  # Install libssl for Ansible (to work around https://bugs.launchpad.net/ubuntu/+source/openssl/+bug/1832919)
  # https://github.com/hashicorp/vagrant/issues/10914
  config.vm.provision "shell",
  inline: "sudo apt-get update -y -qq && "\
    "sudo dpkg-reconfigure libc6 && "\
    "export DEBIAN_FRONTEND=noninteractive && "\
    "sudo -E apt-get -q --option \"Dpkg::Options::=--force-confold\" --assume-yes install libssl1.1"

  # Setup our vagrant user to include everything we care about
  # 
  # NOTE: everything following this can rely on build
  # dependencies to exist
  config.vm.provision "shell", path: "provision.sh"

  # Include i3 configuration
  # 
  # This includes the explicit i3 config as well as our
  # workspaces and initialization script.
  config.vm.provision "file",
    source: "i3-config",
    destination: "/home/vagrant/.i3/config"
  config.vm.provision "file",
    source: "i3-startup.sh",
    destination: "/home/vagrant/.i3/i3-startup.sh"
  config.vm.provision "shell", inline: <<-SHELL
    chmod +x /home/vagrant/.i3/i3-startup.sh
  SHELL
  config.vm.provision "file",
    source: "workspace-1.json",
    destination: "/home/vagrant/.i3/workspace-1.json"
  config.vm.provision "file",
    source: "workspace-2.json",
    destination: "/home/vagrant/.i3/workspace-2.json"
  config.vm.provision "file",
    source: "workspace-3.json",
    destination: "/home/vagrant/.i3/workspace-3.json"

  # Include Xdefaults for styling
  config.vm.provision "file",
    source: "xDefaults",
    destination: "/home/vagrant/.Xdefaults"

  # Include nanorc
  config.vm.provision "file",
    source: "nanorc",
    destination: "/home/vagrant/.nanorc"

  # Include xinitrc
  config.vm.provision "file",
    source: "xinitrc",
    destination: "/home/vagrant/.xinitrc"

  # Include vs code settings
  # and configure extensions
  config.vm.provision "file",
    source: "vscode_settings.json",
    destination: "/home/vagrant/.config/Code/User/settings.json"
  config.vm.provision "file",
    source: "vscode_keybindings.json",
    destination: "/home/vagrant/.config/Code/User/keybindings.json"
  config.vm.provision "shell", inline: <<-SHELL
    extensions=(
      ms-vscode.Go
      mohsen1.prettify-json
      naumovs.color-highlight
      eg2.tslint
    )
    for i in "${extensions[@]}"; do
      su -c "code --install-extension $i" vagrant
    done

    # Upgrade to newest version
    # 
    # provision.sh will install an old version so we can use
    # --install-extension
    apt-get update
    apt-get dist-upgrade -y
  SHELL

  # Include watcher convenience scripts
  config.vm.provision "file",
    source: "watch-free_mem.sh",
    destination: "/home/vagrant/gopath/watch-free_mem.sh"
  config.vm.provision "file",
    source: "watch-git_status.sh",
    destination: "/home/vagrant/gopath/watch-git_status.sh"

  # Include ssh helper
  config.vm.provision "file",
    source: "ssh-agent.sh",
    destination: "/home/vagrant/ssh-agent.sh"
  # Include virtualbox services helper
  config.vm.provision "file",
    source: "vbox-services.sh",
    destination: "/home/vagrant/vbox-services.sh"

  # Include mononoki as an available font
  config.vm.provision "file",
    source: "mononoki-Regular.ttf",
    destination: "/home/vagrant/.fonts/mononoki-Regular.ttf"
  config.vm.provision "shell", inline: <<-SHELL
    fc-cache -fv
  SHELL

  # Include bash_profile
  # 
  # This automatically logs in tty8
  config.vm.provision "file",
    source: "bash_profile",
    destination: "/home/vagrant/.bash_profile"

  # Include getty@tty1.conf for systemd autostart
  # 
  # This allows bootstrapping from tty1 to i3.
  # 
  # Note: a cat foo | systemctl edit getty@tty1 does not work
  config.vm.provision "file",
    source: "getty@tty1.conf",
    destination: "/home/vagrant/getty@tty1.conf"
  config.vm.provision "shell", inline: <<-SHELL
    mkdir -p /etc/systemd/system/getty@tty1.service.d && \
    mv getty@tty1.conf \
      /etc/systemd/system/getty@tty1.service.d/override.conf
  SHELL

  # Reboot straight into i3
  config.vm.provision "shell", inline: <<-SHELL
    reboot
  SHELL
end
